*** /usr/local/ruby184/lib/ruby/gems/1.8/gems/mongrel-0.3.13.4/ext/http11/http11.c	2006-12-30 14:55:52.000000000 -0600
--- ./http11.c	2007-01-15 09:20:08.000000000 -0600
***************
*** 1,6 ****
--- 1,11 ----
  /**
   * Copyright (c) 2005 Zed A. Shaw
   * You can redistribute it and/or modify it under the same terms as Ruby.
+  *
+  * Modified September 2006, January 2007 by Kirk Haines in order to make
+  * return results * more convenient for IOWA use and to separate the classifier
+  * code from the parser code.  To see the changes that were made, look in the
+  * .dif files.
   */
  #include "ruby.h"
  #include "ext_help.h"
***************
*** 8,21 ****
  #include <string.h>
  #include "http11_parser.h"
  #include <ctype.h>
- #include "tst.h"
  
! static VALUE mMongrel;
  static VALUE cHttpParser;
- static VALUE cURIClassifier;
  static VALUE eHttpParserError;
  
- #define id_handler_map rb_intern("@handler_map")
  #define id_http_body rb_intern("@http_body")
  
  static VALUE global_http_prefix;
--- 13,23 ----
  #include <string.h>
  #include "http11_parser.h"
  #include <ctype.h>
  
! static VALUE mIowa;
  static VALUE cHttpParser;
  static VALUE eHttpParserError;
  
  #define id_http_body rb_intern("@http_body")
  
  static VALUE global_http_prefix;
***************
*** 35,46 ****
  static VALUE global_server_protocol;
  static VALUE global_server_protocol_value;
  static VALUE global_http_host;
! static VALUE global_mongrel_version;
  static VALUE global_server_software;
  static VALUE global_port_80;
  
- #define TRIE_INCREASE 30
- 
  /** Defines common length and error messages for input length validation. */
  #define DEF_MAX_LENGTH(N,length) const size_t MAX_##N##_LENGTH = length; const char *MAX_##N##_LENGTH_ERR = "HTTP element " # N  " is longer than the " # length " allowed length."
  
--- 37,46 ----
  static VALUE global_server_protocol;
  static VALUE global_server_protocol_value;
  static VALUE global_http_host;
! static VALUE global_parser_version;
  static VALUE global_server_software;
  static VALUE global_port_80;
  
  /** Defines common length and error messages for input length validation. */
  #define DEF_MAX_LENGTH(N,length) const size_t MAX_##N##_LENGTH = length; const char *MAX_##N##_LENGTH_ERR = "HTTP element " # N  " is longer than the " # length " allowed length."
  
***************
*** 75,85 ****
    f = rb_str_buf_cat(f, field, flen); 
  
    for(ch = RSTRING(f)->ptr, end = ch + RSTRING(f)->len; ch < end; ch++) {
!     if(*ch == '-') {
!       *ch = '_';
!     } else {
!       *ch = toupper(*ch);
!     }
    }
  
    rb_hash_aset(req, f, v);
--- 75,81 ----
    f = rb_str_buf_cat(f, field, flen); 
  
    for(ch = RSTRING(f)->ptr, end = ch + RSTRING(f)->len; ch < end; ch++) {
!     *ch = toupper(*ch);
    }
  
    rb_hash_aset(req, f, v);
***************
*** 173,179 ****
    // grab the initial body and stuff it into an ivar
    rb_ivar_set(req, id_http_body, rb_str_new(at, length));
    rb_hash_aset(req, global_server_protocol, global_server_protocol_value);
!   rb_hash_aset(req, global_server_software, global_mongrel_version);
  }
  
  
--- 169,175 ----
    // grab the initial body and stuff it into an ivar
    rb_ivar_set(req, id_http_body, rb_str_new(at, length));
    rb_hash_aset(req, global_server_protocol, global_server_protocol_value);
!   rb_hash_aset(req, global_server_software, global_parser_version);
  }
  
  
***************
*** 258,264 ****
  
  /**
   * call-seq:
!  *    parser.execute(req_hash, data, start) -> Integer
   *
   * Takes a Hash and a String of data, parses the String of data filling in the Hash
   * returning an Integer to indicate how much of the data has been read.  No matter
--- 254,260 ----
  
  /**
   * call-seq:
!  *    parser.execute(req_headers, req_params, data, start) -> Integer
   *
   * Takes a Hash and a String of data, parses the String of data filling in the Hash
   * returning an Integer to indicate how much of the data has been read.  No matter
***************
*** 273,279 ****
   * the parsing from that position.  It needs all of the original data as well 
   * so you have to append to the data buffer as you read.
   */
! VALUE HttpParser_execute(VALUE self, VALUE req_hash, VALUE data, VALUE start)
  {
    http_parser *http = NULL;
    int from = 0;
--- 269,275 ----
   * the parsing from that position.  It needs all of the original data as well 
   * so you have to append to the data buffer as you read.
   */
! VALUE HttpParser_execute(VALUE self, VALUE req_headers, VALUE req_params, VALUE data, VALUE start)
  {
    http_parser *http = NULL;
    int from = 0;
***************
*** 289,295 ****
    if(from >= dlen) {
      rb_raise(eHttpParserError, "Requested start is after data buffer end.");
    } else {
!     http->data = (void *)req_hash;
      http_parser_execute(http, dptr, dlen, from);
  
      VALIDATE_MAX_LENGTH(http_parser_nread(http), HEADER);
--- 285,293 ----
    if(from >= dlen) {
      rb_raise(eHttpParserError, "Requested start is after data buffer end.");
    } else {
!     http->paramdata = (void *)req_params;
! 		http->headerdata = (void *)req_headers;
! 
      http_parser_execute(http, dptr, dlen, from);
  
      VALIDATE_MAX_LENGTH(http_parser_nread(http), HEADER);
***************
*** 349,545 ****
    return INT2FIX(http->nread);
  }
  
- 
- void URIClassifier_free(void *data) 
- {
-   TRACE();
- 
-   if(data) {
-     tst_cleanup((struct tst *)data);
-   }
- }
- 
- 
- 
- VALUE URIClassifier_alloc(VALUE klass)
- {
-   VALUE obj;
-   struct tst *tst = tst_init(TRIE_INCREASE);
-   TRACE();
-   assert(tst && "failed to initialize trie structure");
- 
-   obj = Data_Wrap_Struct(klass, NULL, URIClassifier_free, tst);
- 
-   return obj;
- }
- 
- /**
-  * call-seq:
-  *    URIClassifier.new -> URIClassifier
-  *
-  * Initializes a new URIClassifier object that you can use to associate URI sequences
-  * with objects.  You can actually use it with any string sequence and any objects,
-  * but it's mostly used with URIs.
-  *
-  * It uses TST from http://www.octavian.org/cs/software.html to build an ternary search
-  * trie to hold all of the URIs.  It uses this to do an initial search for the a URI
-  * prefix, and then to break the URI into SCRIPT_NAME and PATH_INFO portions.  It actually
-  * will do two searches most of the time in order to find the right handler for the
-  * registered prefix portion.
-  *
-  */
- VALUE URIClassifier_init(VALUE self)
- {
-   VALUE hash;
- 
-   // we create an internal hash to protect stuff from the GC
-   hash = rb_hash_new();
-   rb_ivar_set(self, id_handler_map, hash);
- 
-   return self;
- }
- 
- 
- /**
-  * call-seq:
-  *    uc.register("/someuri", SampleHandler.new) -> nil
-  *
-  * Registers the SampleHandler (one for all requests) with the "/someuri".
-  * When URIClassifier::resolve is called with "/someuri" it'll return
-  * SampleHandler immediately.  When called with "/someuri/iwant" it'll also
-  * return SomeHandler immediatly, with no additional searches, but it will
-  * return path info with "/iwant".
-  *
-  * You actually can reuse this class to register nearly anything and 
-  * quickly resolve it.  This could be used for caching, fast mapping, etc.
-  * The downside is it uses much more memory than a Hash, but it can be
-  * a lot faster.  It's main advantage is that it works on prefixes, which
-  * is damn hard to get right with a Hash.
-  */
- VALUE URIClassifier_register(VALUE self, VALUE uri, VALUE handler)
- {
-   int rc = 0;
-   void *ptr = NULL;
-   struct tst *tst = NULL;
-   DATA_GET(self, struct tst, tst);
- 
-   rc = tst_insert((unsigned char *)StringValueCStr(uri), (void *)handler , tst, 0, &ptr);
- 
-   if(rc == TST_DUPLICATE_KEY) {
-     rb_raise(rb_eStandardError, "Handler already registered with that name");
-   } else if(rc == TST_ERROR) {
-     rb_raise(rb_eStandardError, "Memory error registering handler");
-   } else if(rc == TST_NULL_KEY) {
-     rb_raise(rb_eStandardError, "URI was empty");
-   }
- 
-   rb_hash_aset(rb_ivar_get(self, id_handler_map), uri, handler);
- 
-   return Qnil;
- }
- 
- 
- /**
-  * call-seq:
-  *    uc.unregister("/someuri")
-  *
-  * Yep, just removes this uri and it's handler from the trie.
-  */
- VALUE URIClassifier_unregister(VALUE self, VALUE uri)
- {
-   void *handler = NULL;
-   struct tst *tst = NULL;
-   DATA_GET(self, struct tst, tst);
- 
-   handler = tst_delete((unsigned char *)StringValueCStr(uri), tst);
- 
-   if(handler) {
-     rb_hash_delete(rb_ivar_get(self, id_handler_map), uri);
- 
-     return (VALUE)handler;
-   } else {
-     return Qnil;
-   }
- }
- 
- 
- /**
-  * call-seq:
-  *    uc.resolve("/someuri") -> "/someuri", "", handler
-  *    uc.resolve("/someuri/pathinfo") -> "/someuri", "/pathinfo", handler
-  *    uc.resolve("/notfound/orhere") -> nil, nil, nil
-  *    uc.resolve("/") -> "/", "/", handler  # if uc.register("/", handler)
-  *    uc.resolve("/path/from/root") -> "/", "/path/from/root", handler  # if uc.register("/", handler) 
-  * 
-  * Attempts to resolve either the whole URI or at the longest prefix, returning
-  * the prefix (as script_info), path (as path_info), and registered handler
-  * (usually an HttpHandler).  If it doesn't find a handler registered at the longest
-  * match then it returns nil,nil,nil.
-  *
-  * Because the resolver uses a trie you are able to register a handler at *any* character
-  * in the URI and it will be handled as long as it's the longest prefix.  So, if you 
-  * registered handler #1 at "/something/lik", and #2 at "/something/like/that", then a
-  * a search for "/something/like" would give you #1.  A search for "/something/like/that/too"
-  * would give you #2.
-  * 
-  * This is very powerful since it means you can also attach handlers to parts of the ; 
-  * (semi-colon) separated path params, any part of the path, use off chars, anything really.
-  * It also means that it's very efficient to do this only taking as long as the URI has
-  * characters.
-  *
-  * A slight modification to the CGI 1.2 standard is given for handlers registered to "/".
-  * CGI expects all CGI scripts to be at some script path, so it doesn't really say anything
-  * about a script that handles the root.  To make this work, the resolver will detect that
-  * the requested handler is at "/", and return that for script_name, and then simply return
-  * the full URI back as path_info.
-  *
-  * It expects strings with no embedded '\0' characters.  Don't try other string-like stuff yet.
-  */
- VALUE URIClassifier_resolve(VALUE self, VALUE uri)
- {
-   void *handler = NULL;
-   int pref_len = 0;
-   struct tst *tst = NULL;
-   VALUE result;
-   unsigned char *uri_str = NULL;
- 
-   DATA_GET(self, struct tst, tst);
-   uri_str = (unsigned char *)StringValueCStr(uri);
- 
-   handler = tst_search(uri_str, tst, &pref_len);
- 
-   // setup for multiple return values
-   result = rb_ary_new();
- 
-   if(handler) {
-     rb_ary_push(result, rb_str_substr (uri, 0, pref_len));
-     // compensate for a script_name="/" where we need to add the "/" to path_info to keep it consistent
-     if(pref_len == 1 && uri_str[0] == '/') {
-       // matches the root URI so we have to use the whole URI as the path_info
-       rb_ary_push(result, uri);
-     } else {
-       // matches a script so process like normal
-       rb_ary_push(result, rb_str_substr(uri, pref_len, RSTRING(uri)->len));
-     }
- 
-     rb_ary_push(result, (VALUE)handler);
-   } else {
-     // not found so push back nothing
-     rb_ary_push(result, Qnil);
-     rb_ary_push(result, Qnil);
-     rb_ary_push(result, Qnil);
-   }
- 
-   return result;
- }
- 
- 
  void Init_http11()
  {
  
!   mMongrel = rb_define_module("Mongrel");
  
!   DEF_GLOBAL(http_prefix, "HTTP_");
    DEF_GLOBAL(request_method, "REQUEST_METHOD");
    DEF_GLOBAL(request_uri, "REQUEST_URI");
    DEF_GLOBAL(query_string, "QUERY_STRING");
--- 347,358 ----
    return INT2FIX(http->nread);
  }
  
  void Init_http11()
  {
  
! 	mIowa = rb_define_module("Iowa");
  
!   DEF_GLOBAL(http_prefix, "");
    DEF_GLOBAL(request_method, "REQUEST_METHOD");
    DEF_GLOBAL(request_uri, "REQUEST_URI");
    DEF_GLOBAL(query_string, "QUERY_STRING");
***************
*** 556,583 ****
    DEF_GLOBAL(server_protocol, "SERVER_PROTOCOL");
    DEF_GLOBAL(server_protocol_value, "HTTP/1.1");
    DEF_GLOBAL(http_host, "HTTP_HOST");
!   DEF_GLOBAL(mongrel_version, "Mongrel 0.3.13.4");
    DEF_GLOBAL(server_software, "SERVER_SOFTWARE");
    DEF_GLOBAL(port_80, "80");
  
!   eHttpParserError = rb_define_class_under(mMongrel, "HttpParserError", rb_eIOError);
  
!   cHttpParser = rb_define_class_under(mMongrel, "HttpParser", rb_cObject);
    rb_define_alloc_func(cHttpParser, HttpParser_alloc);
    rb_define_method(cHttpParser, "initialize", HttpParser_init,0);
    rb_define_method(cHttpParser, "reset", HttpParser_reset,0);
    rb_define_method(cHttpParser, "finish", HttpParser_finish,0);
!   rb_define_method(cHttpParser, "execute", HttpParser_execute,3);
    rb_define_method(cHttpParser, "error?", HttpParser_has_error,0);
    rb_define_method(cHttpParser, "finished?", HttpParser_is_finished,0);
    rb_define_method(cHttpParser, "nread", HttpParser_nread,0);
- 
-   cURIClassifier = rb_define_class_under(mMongrel, "URIClassifier", rb_cObject);
-   rb_define_alloc_func(cURIClassifier, URIClassifier_alloc);
-   rb_define_method(cURIClassifier, "initialize", URIClassifier_init, 0);
-   rb_define_method(cURIClassifier, "register", URIClassifier_register, 2);
-   rb_define_method(cURIClassifier, "unregister", URIClassifier_unregister, 1);
-   rb_define_method(cURIClassifier, "resolve", URIClassifier_resolve, 1);
  }
- 
- 
--- 369,387 ----
    DEF_GLOBAL(server_protocol, "SERVER_PROTOCOL");
    DEF_GLOBAL(server_protocol_value, "HTTP/1.1");
    DEF_GLOBAL(http_host, "HTTP_HOST");
!   DEF_GLOBAL(parser_version, "IOWA 0.99.2.18");
    DEF_GLOBAL(server_software, "SERVER_SOFTWARE");
    DEF_GLOBAL(port_80, "80");
  
!   eHttpParserError = rb_define_class_under(mIowa, "HttpParserError", rb_eIOError);
  
!   cHttpParser = rb_define_class_under(mIowa, "HttpParser", rb_cObject);
    rb_define_alloc_func(cHttpParser, HttpParser_alloc);
    rb_define_method(cHttpParser, "initialize", HttpParser_init,0);
    rb_define_method(cHttpParser, "reset", HttpParser_reset,0);
    rb_define_method(cHttpParser, "finish", HttpParser_finish,0);
!   rb_define_method(cHttpParser, "execute", HttpParser_execute,4);
    rb_define_method(cHttpParser, "error?", HttpParser_has_error,0);
    rb_define_method(cHttpParser, "finished?", HttpParser_is_finished,0);
    rb_define_method(cHttpParser, "nread", HttpParser_nread,0);
  }
